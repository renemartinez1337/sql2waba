
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 12 13:32:09 EST 2016
//----------------------------------------------------

package sql;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 12 13:32:09 EST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\003\004\000\002\002\004\000\002\003" +
    "\003\000\002\002\011\000\002\002\014\000\002\002\010" +
    "\000\002\002\013\000\002\017\004\000\002\017\003\000" +
    "\002\020\015\000\002\020\015\000\002\020\014\000\002" +
    "\020\014\000\002\020\012\000\002\020\011\000\002\020" +
    "\014\000\002\020\014\000\002\020\013\000\002\020\013" +
    "\000\002\020\011\000\002\020\010\000\002\004\004\000" +
    "\002\004\003\000\002\032\005\000\002\032\005\000\002" +
    "\012\005\000\002\012\007\000\002\012\005\000\002\012" +
    "\003\000\002\013\005\000\002\013\007\000\002\013\005" +
    "\000\002\013\003\000\002\014\005\000\002\014\003\000" +
    "\002\033\004\000\002\033\004\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\004\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\003\000\002\006\011\000\002" +
    "\006\015\000\002\006\007\000\002\010\011\000\002\011" +
    "\013\000\002\021\020\000\002\021\017\000\002\021\017" +
    "\000\002\021\016\000\002\022\006\000\002\023\006\000" +
    "\002\023\005\000\002\024\007\000\002\025\007\000\002" +
    "\015\005\000\002\015\003\000\002\016\004\000\002\016" +
    "\004\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\027\005\000\002\027\005\000\002\027\005\000" +
    "\002\027\005\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\030\005\000\002\030\005\000\002\030" +
    "\003\000\002\031\005\000\002\031\005\000\002\031\003" +
    "\000\002\034\005\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\004\000\002\034\004\000\002" +
    "\034\003\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\010\006\010\007\012\015\011\001\002\000" +
    "\010\006\010\007\012\015\011\001\002\000\010\006\ufff9" +
    "\007\ufff9\015\ufff9\001\002\000\004\002\377\001\002\000" +
    "\004\002\uffff\001\002\000\004\004\346\001\002\000\006" +
    "\004\322\016\323\001\002\000\006\004\013\016\014\001" +
    "\002\000\004\043\263\001\002\000\004\043\015\001\002" +
    "\000\004\044\016\001\002\000\004\045\017\001\002\000" +
    "\030\003\037\004\030\006\033\007\023\012\027\014\025" +
    "\017\024\020\045\021\031\022\034\023\041\001\002\000" +
    "\032\003\uffdb\004\uffdb\006\uffdb\007\uffdb\012\uffdb\014\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\046\uffdb\001" +
    "\002\000\032\003\uffd9\004\uffd9\006\uffd9\007\uffd9\012\uffd9" +
    "\014\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\046" +
    "\uffd9\001\002\000\032\003\uffda\004\uffda\006\uffda\007\uffda" +
    "\012\uffda\014\uffda\017\uffda\020\uffda\021\uffda\022\uffda\023" +
    "\uffda\046\uffda\001\002\000\004\004\252\001\002\000\004" +
    "\043\244\001\002\000\016\003\063\004\061\005\055\010" +
    "\057\011\060\043\066\001\002\000\032\003\uffd6\004\uffd6" +
    "\006\uffd6\007\uffd6\012\uffd6\014\uffd6\017\uffd6\020\uffd6\021" +
    "\uffd6\022\uffd6\023\uffd6\046\uffd6\001\002\000\004\043\226" +
    "\001\002\000\014\024\223\035\222\037\220\043\137\050" +
    "\221\001\002\000\004\045\210\001\002\000\032\003\uffd3" +
    "\004\uffd3\006\uffd3\007\uffd3\012\uffd3\014\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\023\uffd3\046\uffd3\001\002\000\004" +
    "\004\177\001\002\000\004\043\173\001\002\000\004\050" +
    "\172\001\002\000\030\003\037\004\030\006\033\007\023" +
    "\012\027\014\166\017\024\020\045\021\031\022\034\023" +
    "\041\001\002\000\032\003\uffd0\004\uffd0\006\uffd0\007\uffd0" +
    "\012\uffd0\014\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023" +
    "\uffd0\046\uffd0\001\002\000\032\003\uffdc\004\uffdc\006\uffdc" +
    "\007\uffdc\012\uffdc\014\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\046\uffdc\001\002\000\004\043\162\001\002" +
    "\000\004\050\161\001\002\000\032\003\uffd8\004\uffd8\006" +
    "\uffd8\007\uffd8\012\uffd8\014\uffd8\017\uffd8\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\046\uffd8\001\002\000\032\003\uffd5\004" +
    "\uffd5\006\uffd5\007\uffd5\012\uffd5\014\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\046\uffd5\001\002\000\004\043" +
    "\050\001\002\000\032\003\uffd7\004\uffd7\006\uffd7\007\uffd7" +
    "\012\uffd7\014\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023" +
    "\uffd7\046\uffd7\001\002\000\032\003\uffeb\004\uffeb\006\uffeb" +
    "\007\uffeb\012\uffeb\014\uffeb\017\uffeb\020\uffeb\021\uffeb\022" +
    "\uffeb\023\uffeb\046\uffeb\001\002\000\006\004\051\007\052" +
    "\001\002\000\004\024\146\001\002\000\004\004\053\001" +
    "\002\000\004\024\054\001\002\000\016\003\063\004\061" +
    "\005\055\010\057\011\060\043\066\001\002\000\040\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\036\uffab\040\uffab\041\uffab\042\uffab\044\uffab\047" +
    "\uffab\050\uffab\001\002\000\040\025\uffb1\026\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034\uffb1\036\uffb1\040" +
    "\uffb1\041\076\042\075\044\uffb1\047\uffb1\050\uffb1\001\002" +
    "\000\040\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\032" +
    "\uffa7\033\uffa7\034\uffa7\036\uffa7\040\uffa7\041\uffa7\042\uffa7" +
    "\044\uffa7\047\uffa7\050\uffa7\001\002\000\040\025\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6" +
    "\036\uffa6\040\uffa6\041\uffa6\042\uffa6\044\uffa6\047\uffa6\050" +
    "\uffa6\001\002\000\046\025\uffaa\026\uffaa\027\uffaa\030\uffaa" +
    "\031\uffaa\032\uffaa\033\uffaa\034\uffaa\035\136\036\uffaa\037" +
    "\135\040\uffaa\041\uffaa\042\uffaa\043\137\044\uffaa\047\uffaa" +
    "\050\uffaa\001\002\000\040\025\uffae\026\uffae\027\uffae\030" +
    "\uffae\031\uffae\032\uffae\033\uffae\034\uffae\036\uffae\040\uffae" +
    "\041\uffae\042\uffae\044\uffae\047\uffae\050\uffae\001\002\000" +
    "\040\025\uffa5\026\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5" +
    "\033\uffa5\034\uffa5\036\uffa5\040\uffa5\041\uffa5\042\uffa5\044" +
    "\uffa5\047\uffa5\050\uffa5\001\002\000\040\025\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\036" +
    "\uffac\040\uffac\041\uffac\042\uffac\044\uffac\047\uffac\050\uffac" +
    "\001\002\000\010\036\072\040\073\050\123\001\002\000" +
    "\016\003\063\004\061\005\055\010\057\011\060\043\066" +
    "\001\002\000\010\033\117\034\120\044\116\001\002\000" +
    "\030\025\103\026\106\027\107\030\102\031\105\032\104" +
    "\033\uffbb\034\uffbb\044\uffbb\047\uffbb\050\uffbb\001\002\000" +
    "\034\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4" +
    "\033\uffb4\034\uffb4\036\072\040\073\044\uffb4\047\uffb4\050" +
    "\uffb4\001\002\000\016\003\063\004\061\005\055\010\057" +
    "\011\060\043\066\001\002\000\016\003\063\004\061\005" +
    "\055\010\057\011\060\043\066\001\002\000\040\025\uffb2" +
    "\026\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\036\uffb2\040\uffb2\041\076\042\075\044\uffb2\047\uffb2" +
    "\050\uffb2\001\002\000\016\003\063\004\061\005\055\010" +
    "\057\011\060\043\066\001\002\000\016\003\063\004\061" +
    "\005\055\010\057\011\060\043\066\001\002\000\040\025" +
    "\uffb0\026\uffb0\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\034\uffb0\036\uffb0\040\uffb0\041\uffb0\042\uffb0\044\uffb0\047" +
    "\uffb0\050\uffb0\001\002\000\040\025\uffaf\026\uffaf\027\uffaf" +
    "\030\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\036\uffaf\040" +
    "\uffaf\041\uffaf\042\uffaf\044\uffaf\047\uffaf\050\uffaf\001\002" +
    "\000\040\025\uffb3\026\uffb3\027\uffb3\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\036\uffb3\040\uffb3\041\076\042\075" +
    "\044\uffb3\047\uffb3\050\uffb3\001\002\000\016\003\063\004" +
    "\061\005\055\010\057\011\060\043\066\001\002\000\016" +
    "\003\063\004\061\005\055\010\057\011\060\043\066\001" +
    "\002\000\016\003\063\004\061\005\055\010\057\011\060" +
    "\043\066\001\002\000\016\003\063\004\061\005\055\010" +
    "\057\011\060\043\066\001\002\000\016\003\063\004\061" +
    "\005\055\010\057\011\060\043\066\001\002\000\016\003" +
    "\063\004\061\005\055\010\057\011\060\043\066\001\002" +
    "\000\034\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\036\072\040\073\044\uffb7\047\uffb7" +
    "\050\uffb7\001\002\000\034\025\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\036\072\040\073" +
    "\044\uffb8\047\uffb8\050\uffb8\001\002\000\034\025\uffba\026" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba" +
    "\036\072\040\073\044\uffba\047\uffba\050\uffba\001\002\000" +
    "\034\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\036\072\040\073\044\uffb5\047\uffb5\050" +
    "\uffb5\001\002\000\034\025\uffb6\026\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\072\040\073\044" +
    "\uffb6\047\uffb6\050\uffb6\001\002\000\034\025\uffb9\026\uffb9" +
    "\027\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\036" +
    "\072\040\073\044\uffb9\047\uffb9\050\uffb9\001\002\000\040" +
    "\025\uffad\026\uffad\027\uffad\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\036\uffad\040\uffad\041\uffad\042\uffad\044\uffad" +
    "\047\uffad\050\uffad\001\002\000\016\003\063\004\061\005" +
    "\055\010\057\011\060\043\066\001\002\000\016\003\063" +
    "\004\061\005\055\010\057\011\060\043\066\001\002\000" +
    "\030\025\103\026\106\027\107\030\102\031\105\032\104" +
    "\033\uffbd\034\uffbd\044\uffbd\047\uffbd\050\uffbd\001\002\000" +
    "\030\025\103\026\106\027\107\030\102\031\105\032\104" +
    "\033\uffbc\034\uffbc\044\uffbc\047\uffbc\050\uffbc\001\002\000" +
    "\016\003\063\004\061\005\055\010\057\011\060\043\066" +
    "\001\002\000\020\025\103\026\106\027\107\030\102\031" +
    "\105\032\104\050\125\001\002\000\016\003\063\004\061" +
    "\005\055\010\057\011\060\043\066\001\002\000\010\036" +
    "\072\040\073\044\127\001\002\000\004\045\130\001\002" +
    "\000\030\003\037\004\030\006\033\007\023\012\027\017" +
    "\024\020\045\021\031\022\034\023\041\046\131\001\002" +
    "\000\032\003\uffc8\004\uffc8\006\uffc8\007\uffc8\012\uffc8\014" +
    "\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8\023\uffc8\046\uffc8" +
    "\001\002\000\030\003\037\004\030\006\033\007\023\012" +
    "\027\017\024\020\045\021\031\022\034\023\041\046\133" +
    "\001\002\000\032\003\uffca\004\uffca\006\uffca\007\uffca\012" +
    "\uffca\014\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca" +
    "\046\uffca\001\002\000\032\003\uffec\004\uffec\006\uffec\007" +
    "\uffec\012\uffec\014\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\046\uffec\001\002\000\040\025\uffa8\026\uffa8\027" +
    "\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\036\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\044\uffa8\047\uffa8\050\uffa8\001" +
    "\002\000\040\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\036\uffa9\040\uffa9\041\uffa9\042" +
    "\uffa9\044\uffa9\047\uffa9\050\uffa9\001\002\000\020\003\063" +
    "\004\061\005\055\010\057\011\060\043\066\044\141\001" +
    "\002\000\012\033\117\034\120\044\uffc0\047\uffc0\001\002" +
    "\000\040\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\036\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\044\uffc4\047\uffc4\050\uffc4\001\002\000\006\044\143\047" +
    "\144\001\002\000\040\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\036\uffc5\040\uffc5\041" +
    "\uffc5\042\uffc5\044\uffc5\047\uffc5\050\uffc5\001\002\000\016" +
    "\003\063\004\061\005\055\010\057\011\060\043\066\001" +
    "\002\000\012\033\117\034\120\044\uffc1\047\uffc1\001\002" +
    "\000\016\003\063\004\061\005\055\010\057\011\060\043" +
    "\066\001\002\000\010\036\072\040\073\050\150\001\002" +
    "\000\016\003\063\004\061\005\055\010\057\011\060\043" +
    "\066\001\002\000\020\025\103\026\106\027\107\030\102" +
    "\031\105\032\104\050\152\001\002\000\016\003\063\004" +
    "\061\005\055\010\057\011\060\043\066\001\002\000\010" +
    "\036\072\040\073\044\154\001\002\000\004\045\155\001" +
    "\002\000\030\003\037\004\030\006\033\007\023\012\027" +
    "\017\024\020\045\021\031\022\034\023\041\046\156\001" +
    "\002\000\032\003\uffc7\004\uffc7\006\uffc7\007\uffc7\012\uffc7" +
    "\014\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7\046" +
    "\uffc7\001\002\000\030\003\037\004\030\006\033\007\023" +
    "\012\027\017\024\020\045\021\031\022\034\023\041\046" +
    "\160\001\002\000\032\003\uffc9\004\uffc9\006\uffc9\007\uffc9" +
    "\012\uffc9\014\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023" +
    "\uffc9\046\uffc9\001\002\000\032\003\uffd4\004\uffd4\006\uffd4" +
    "\007\uffd4\012\uffd4\014\uffd4\017\uffd4\020\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\046\uffd4\001\002\000\016\003\063\004\061" +
    "\005\055\010\057\011\060\043\066\001\002\000\010\036" +
    "\072\040\073\044\164\001\002\000\004\050\165\001\002" +
    "\000\032\003\uffc2\004\uffc2\006\uffc2\007\uffc2\012\uffc2\014" +
    "\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\046\uffc2" +
    "\001\002\000\016\003\063\004\061\005\055\010\057\011" +
    "\060\043\066\001\002\000\010\036\072\040\073\050\170" +
    "\001\002\000\004\046\171\001\002\000\004\002\ufffd\001" +
    "\002\000\032\003\uffd2\004\uffd2\006\uffd2\007\uffd2\012\uffd2" +
    "\014\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\046" +
    "\uffd2\001\002\000\004\004\174\001\002\000\004\044\175" +
    "\001\002\000\004\050\176\001\002\000\032\003\uffc3\004" +
    "\uffc3\006\uffc3\007\uffc3\012\uffc3\014\uffc3\017\uffc3\020\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\046\uffc3\001\002\000\010\024" +
    "\206\047\uffe1\050\uffe1\001\002\000\006\047\202\050\201" +
    "\001\002\000\032\003\uffe9\004\uffe9\006\uffe9\007\uffe9\012" +
    "\uffe9\014\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\046\uffe9\001\002\000\004\004\203\001\002\000\010\024" +
    "\204\047\uffe4\050\uffe4\001\002\000\016\003\063\004\061" +
    "\005\055\010\057\011\060\043\066\001\002\000\012\033" +
    "\117\034\120\047\uffe3\050\uffe3\001\002\000\016\003\063" +
    "\004\061\005\055\010\057\011\060\043\066\001\002\000" +
    "\012\033\117\034\120\047\uffe2\050\uffe2\001\002\000\026" +
    "\003\037\004\030\006\033\007\023\012\027\017\024\020" +
    "\045\021\031\022\034\023\041\001\002\000\030\003\037" +
    "\004\030\006\033\007\023\012\027\017\024\020\045\021" +
    "\031\022\034\023\041\046\212\001\002\000\004\017\213" +
    "\001\002\000\004\043\214\001\002\000\016\003\063\004" +
    "\061\005\055\010\057\011\060\043\066\001\002\000\010" +
    "\033\117\034\120\044\216\001\002\000\004\050\217\001" +
    "\002\000\032\003\uffcb\004\uffcb\006\uffcb\007\uffcb\012\uffcb" +
    "\014\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\046" +
    "\uffcb\001\002\000\004\050\uffbe\001\002\000\032\003\uffd1" +
    "\004\uffd1\006\uffd1\007\uffd1\012\uffd1\014\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\046\uffd1\001\002\000\004" +
    "\050\uffbf\001\002\000\016\003\063\004\061\005\055\010" +
    "\057\011\060\043\066\001\002\000\010\033\117\034\120" +
    "\050\225\001\002\000\032\003\uffc6\004\uffc6\006\uffc6\007" +
    "\uffc6\012\uffc6\014\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6" +
    "\023\uffc6\046\uffc6\001\002\000\016\003\063\004\061\005" +
    "\055\010\057\011\060\043\066\001\002\000\010\033\117" +
    "\034\120\044\230\001\002\000\030\003\037\004\030\006" +
    "\033\007\023\012\027\017\024\020\045\021\031\022\034" +
    "\023\041\045\231\001\002\000\026\003\037\004\030\006" +
    "\033\007\023\012\027\017\024\020\045\021\031\022\034" +
    "\023\041\001\002\000\032\003\uffcd\004\uffcd\006\uffcd\007" +
    "\uffcd\012\uffcd\014\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd" +
    "\023\uffcd\046\uffcd\001\002\000\030\003\037\004\030\006" +
    "\033\007\023\012\027\017\024\020\045\021\031\022\034" +
    "\023\041\046\234\001\002\000\034\003\uffcf\004\uffcf\006" +
    "\uffcf\007\uffcf\012\uffcf\013\235\014\uffcf\017\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\046\uffcf\001\002\000\004\045" +
    "\236\001\002\000\026\003\037\004\030\006\033\007\023" +
    "\012\027\017\024\020\045\021\031\022\034\023\041\001" +
    "\002\000\030\003\037\004\030\006\033\007\023\012\027" +
    "\017\024\020\045\021\031\022\034\023\041\046\240\001" +
    "\002\000\032\003\uffce\004\uffce\006\uffce\007\uffce\012\uffce" +
    "\014\uffce\017\uffce\020\uffce\021\uffce\022\uffce\023\uffce\046" +
    "\uffce\001\002\000\010\036\072\040\073\050\242\001\002" +
    "\000\004\046\243\001\002\000\004\002\ufffb\001\002\000" +
    "\016\003\063\004\061\005\055\010\057\011\060\043\066" +
    "\001\002\000\010\033\117\034\120\044\246\001\002\000" +
    "\004\045\247\001\002\000\026\003\037\004\030\006\033" +
    "\007\023\012\027\017\024\020\045\021\031\022\034\023" +
    "\041\001\002\000\030\003\037\004\030\006\033\007\023" +
    "\012\027\017\024\020\045\021\031\022\034\023\041\046" +
    "\251\001\002\000\032\003\uffcc\004\uffcc\006\uffcc\007\uffcc" +
    "\012\uffcc\014\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\046\uffcc\001\002\000\010\024\261\047\uffe5\050\uffe5" +
    "\001\002\000\006\047\255\050\254\001\002\000\032\003" +
    "\uffea\004\uffea\006\uffea\007\uffea\012\uffea\014\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\046\uffea\001\002\000" +
    "\004\004\256\001\002\000\010\024\257\047\uffe8\050\uffe8" +
    "\001\002\000\016\003\063\004\061\005\055\010\057\011" +
    "\060\043\066\001\002\000\012\036\072\040\073\047\uffe7" +
    "\050\uffe7\001\002\000\016\003\063\004\061\005\055\010" +
    "\057\011\060\043\066\001\002\000\012\036\072\040\073" +
    "\047\uffe6\050\uffe6\001\002\000\010\006\266\007\270\044" +
    "\264\001\002\000\004\045\310\001\002\000\006\044\273" +
    "\047\274\001\002\000\004\004\272\001\002\000\006\044" +
    "\uffdf\047\uffdf\001\002\000\004\004\271\001\002\000\006" +
    "\044\uffde\047\uffde\001\002\000\006\044\uffdd\047\uffdd\001" +
    "\002\000\004\045\276\001\002\000\006\006\266\007\270" +
    "\001\002\000\006\044\uffe0\047\uffe0\001\002\000\030\003" +
    "\037\004\030\006\033\007\023\012\027\014\277\017\024" +
    "\020\045\021\031\022\034\023\041\001\002\000\016\003" +
    "\063\004\061\005\055\010\057\011\060\043\066\001\002" +
    "\000\030\003\037\004\030\006\033\007\023\012\027\014" +
    "\301\017\024\020\045\021\031\022\034\023\041\001\002" +
    "\000\016\003\063\004\061\005\055\010\057\011\060\043" +
    "\066\001\002\000\010\036\072\040\073\050\303\001\002" +
    "\000\004\046\304\001\002\000\010\006\ufff8\007\ufff8\015" +
    "\ufff8\001\002\000\010\036\072\040\073\050\306\001\002" +
    "\000\004\046\307\001\002\000\010\006\ufff2\007\ufff2\015" +
    "\ufff2\001\002\000\030\003\037\004\030\006\033\007\023" +
    "\012\027\014\311\017\024\020\045\021\031\022\034\023" +
    "\041\001\002\000\016\003\063\004\061\005\055\010\057" +
    "\011\060\043\066\001\002\000\030\003\037\004\030\006" +
    "\033\007\023\012\027\014\313\017\024\020\045\021\031" +
    "\022\034\023\041\001\002\000\016\003\063\004\061\005" +
    "\055\010\057\011\060\043\066\001\002\000\010\036\072" +
    "\040\073\050\315\001\002\000\004\046\316\001\002\000" +
    "\010\006\ufff6\007\ufff6\015\ufff6\001\002\000\010\036\072" +
    "\040\073\050\320\001\002\000\004\046\321\001\002\000" +
    "\010\006\ufff0\007\ufff0\015\ufff0\001\002\000\004\043\332" +
    "\001\002\000\004\043\324\001\002\000\004\044\325\001" +
    "\002\000\004\045\326\001\002\000\030\003\037\004\030" +
    "\006\033\007\023\012\027\017\024\020\045\021\031\022" +
    "\034\023\041\046\327\001\002\000\004\002\ufffc\001\002" +
    "\000\030\003\037\004\030\006\033\007\023\012\027\017" +
    "\024\020\045\021\031\022\034\023\041\046\331\001\002" +
    "\000\004\002\ufffe\001\002\000\010\006\266\007\270\044" +
    "\334\001\002\000\006\044\341\047\274\001\002\000\004" +
    "\045\335\001\002\000\030\003\037\004\030\006\033\007" +
    "\023\012\027\017\024\020\045\021\031\022\034\023\041" +
    "\046\336\001\002\000\010\006\uffed\007\uffed\015\uffed\001" +
    "\002\000\030\003\037\004\030\006\033\007\023\012\027" +
    "\017\024\020\045\021\031\022\034\023\041\046\340\001" +
    "\002\000\010\006\ufff3\007\ufff3\015\ufff3\001\002\000\004" +
    "\045\342\001\002\000\030\003\037\004\030\006\033\007" +
    "\023\012\027\017\024\020\045\021\031\022\034\023\041" +
    "\046\343\001\002\000\010\006\uffee\007\uffee\015\uffee\001" +
    "\002\000\030\003\037\004\030\006\033\007\023\012\027" +
    "\017\024\020\045\021\031\022\034\023\041\046\345\001" +
    "\002\000\010\006\ufff4\007\ufff4\015\ufff4\001\002\000\004" +
    "\043\347\001\002\000\010\006\266\007\270\044\350\001" +
    "\002\000\004\045\365\001\002\000\006\044\352\047\274" +
    "\001\002\000\004\045\353\001\002\000\030\003\037\004" +
    "\030\006\033\007\023\012\027\014\354\017\024\020\045" +
    "\021\031\022\034\023\041\001\002\000\016\003\063\004" +
    "\061\005\055\010\057\011\060\043\066\001\002\000\030" +
    "\003\037\004\030\006\033\007\023\012\027\014\356\017" +
    "\024\020\045\021\031\022\034\023\041\001\002\000\016" +
    "\003\063\004\061\005\055\010\057\011\060\043\066\001" +
    "\002\000\010\036\072\040\073\050\360\001\002\000\004" +
    "\046\361\001\002\000\010\006\ufff7\007\ufff7\015\ufff7\001" +
    "\002\000\010\036\072\040\073\050\363\001\002\000\004" +
    "\046\364\001\002\000\010\006\ufff1\007\ufff1\015\ufff1\001" +
    "\002\000\030\003\037\004\030\006\033\007\023\012\027" +
    "\014\366\017\024\020\045\021\031\022\034\023\041\001" +
    "\002\000\016\003\063\004\061\005\055\010\057\011\060" +
    "\043\066\001\002\000\030\003\037\004\030\006\033\007" +
    "\023\012\027\014\370\017\024\020\045\021\031\022\034" +
    "\023\041\001\002\000\016\003\063\004\061\005\055\010" +
    "\057\011\060\043\066\001\002\000\010\036\072\040\073" +
    "\050\372\001\002\000\004\046\373\001\002\000\010\006" +
    "\ufff5\007\ufff5\015\ufff5\001\002\000\010\036\072\040\073" +
    "\050\375\001\002\000\004\046\376\001\002\000\010\006" +
    "\uffef\007\uffef\015\uffef\001\002\000\004\002\000\001\002" +
    "\000\010\006\ufffa\007\ufffa\015\ufffa\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\012\002\006\003\005\017\003\020\004\001" +
    "\001\000\006\002\u0100\020\377\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\035\005\046\006\037\007\017\010\021\011\020\016\034" +
    "\021\042\022\045\023\041\024\025\025\043\032\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\252\001\001\000\002\001\001\000\012\023" +
    "\063\030\240\031\055\034\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\005\133\006\037\007\017\010" +
    "\021\011\020\016\034\021\042\022\045\023\041\024\025" +
    "\025\043\032\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\023\063\030\064\031" +
    "\055\034\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\063\026\066\027\067\030\070\031" +
    "\055\034\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\023\063\031\100\034\061\001" +
    "\001\000\010\023\063\031\073\034\061\001\001\000\002" +
    "\001\001\000\006\023\063\034\077\001\001\000\006\023" +
    "\063\034\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\023\063\030\114\031\055\034" +
    "\061\001\001\000\012\023\063\030\113\031\055\034\061" +
    "\001\001\000\012\023\063\030\112\031\055\034\061\001" +
    "\001\000\012\023\063\030\111\031\055\034\061\001\001" +
    "\000\012\023\063\030\110\031\055\034\061\001\001\000" +
    "\012\023\063\030\107\031\055\034\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\023\063\027\121\030\070\031\055\034\061\001" +
    "\001\000\014\023\063\027\120\030\070\031\055\034\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\023" +
    "\063\027\123\030\070\031\055\034\061\001\001\000\002" +
    "\001\001\000\012\023\063\030\125\031\055\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\131" +
    "\005\046\006\037\007\017\010\021\011\020\016\034\021" +
    "\042\022\045\023\041\024\025\025\043\032\031\001\001" +
    "\000\002\001\001\000\032\005\133\006\037\007\017\010" +
    "\021\011\020\016\034\021\042\022\045\023\041\024\025" +
    "\025\043\032\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\015\141" +
    "\023\063\026\137\027\067\030\070\031\055\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\063\026\144\027\067\030" +
    "\070\031\055\034\061\001\001\000\002\001\001\000\012" +
    "\023\063\030\146\031\055\034\061\001\001\000\002\001" +
    "\001\000\014\023\063\027\150\030\070\031\055\034\061" +
    "\001\001\000\002\001\001\000\012\023\063\030\152\031" +
    "\055\034\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\156\005\046\006\037\007\017\010\021\011" +
    "\020\016\034\021\042\022\045\023\041\024\025\025\043" +
    "\032\031\001\001\000\002\001\001\000\032\005\133\006" +
    "\037\007\017\010\021\011\020\016\034\021\042\022\045" +
    "\023\041\024\025\025\043\032\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\023\063\030\162\031\055" +
    "\034\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\063\030\166\031\055\034\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\023\063\026\204\027\067\030\070\031" +
    "\055\034\061\001\001\000\002\001\001\000\016\023\063" +
    "\026\206\027\067\030\070\031\055\034\061\001\001\000" +
    "\002\001\001\000\034\004\210\005\046\006\037\007\017" +
    "\010\021\011\020\016\034\021\042\022\045\023\041\024" +
    "\025\025\043\032\031\001\001\000\032\005\133\006\037" +
    "\007\017\010\021\011\020\016\034\021\042\022\045\023" +
    "\041\024\025\025\043\032\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\023\063\026\214\027\067\030" +
    "\070\031\055\034\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\023\063\026\223\027\067" +
    "\030\070\031\055\034\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\023\063\026\226\027\067\030\070" +
    "\031\055\034\061\001\001\000\002\001\001\000\032\005" +
    "\231\006\037\007\017\010\021\011\020\016\034\021\042" +
    "\022\045\023\041\024\025\025\043\032\031\001\001\000" +
    "\034\004\232\005\046\006\037\007\017\010\021\011\020" +
    "\016\034\021\042\022\045\023\041\024\025\025\043\032" +
    "\031\001\001\000\002\001\001\000\032\005\133\006\037" +
    "\007\017\010\021\011\020\016\034\021\042\022\045\023" +
    "\041\024\025\025\043\032\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\236\005\046\006\037\007" +
    "\017\010\021\011\020\016\034\021\042\022\045\023\041" +
    "\024\025\025\043\032\031\001\001\000\032\005\133\006" +
    "\037\007\017\010\021\011\020\016\034\021\042\022\045" +
    "\023\041\024\025\025\043\032\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\023\063\026\244\027\067\030\070\031\055\034" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\004\247\005\046\006\037\007\017\010\021\011\020\016" +
    "\034\021\042\022\045\023\041\024\025\025\043\032\031" +
    "\001\001\000\032\005\133\006\037\007\017\010\021\011" +
    "\020\016\034\021\042\022\045\023\041\024\025\025\043" +
    "\032\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\023\063\030\257\031\055\034\061\001" +
    "\001\000\002\001\001\000\012\023\063\030\261\031\055" +
    "\034\061\001\001\000\002\001\001\000\006\014\264\033" +
    "\266\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\274" +
    "\001\001\000\002\001\001\000\034\004\277\005\046\006" +
    "\037\007\017\010\021\011\020\016\034\021\042\022\045" +
    "\023\041\024\025\025\043\032\031\001\001\000\012\023" +
    "\063\030\304\031\055\034\061\001\001\000\032\005\133" +
    "\006\037\007\017\010\021\011\020\016\034\021\042\022" +
    "\045\023\041\024\025\025\043\032\031\001\001\000\012" +
    "\023\063\030\301\031\055\034\061\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\311\005" +
    "\046\006\037\007\017\010\021\011\020\016\034\021\042" +
    "\022\045\023\041\024\025\025\043\032\031\001\001\000" +
    "\012\023\063\030\316\031\055\034\061\001\001\000\032" +
    "\005\133\006\037\007\017\010\021\011\020\016\034\021" +
    "\042\022\045\023\041\024\025\025\043\032\031\001\001" +
    "\000\012\023\063\030\313\031\055\034\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\004\327\005\046\006\037\007\017\010\021\011" +
    "\020\016\034\021\042\022\045\023\041\024\025\025\043" +
    "\032\031\001\001\000\002\001\001\000\032\005\133\006" +
    "\037\007\017\010\021\011\020\016\034\021\042\022\045" +
    "\023\041\024\025\025\043\032\031\001\001\000\002\001" +
    "\001\000\006\014\332\033\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\336\005\046\006\037\007" +
    "\017\010\021\011\020\016\034\021\042\022\045\023\041" +
    "\024\025\025\043\032\031\001\001\000\002\001\001\000" +
    "\032\005\133\006\037\007\017\010\021\011\020\016\034" +
    "\021\042\022\045\023\041\024\025\025\043\032\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\343" +
    "\005\046\006\037\007\017\010\021\011\020\016\034\021" +
    "\042\022\045\023\041\024\025\025\043\032\031\001\001" +
    "\000\002\001\001\000\032\005\133\006\037\007\017\010" +
    "\021\011\020\016\034\021\042\022\045\023\041\024\025" +
    "\025\043\032\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\350\033\266\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\004\354\005" +
    "\046\006\037\007\017\010\021\011\020\016\034\021\042" +
    "\022\045\023\041\024\025\025\043\032\031\001\001\000" +
    "\012\023\063\030\361\031\055\034\061\001\001\000\032" +
    "\005\133\006\037\007\017\010\021\011\020\016\034\021" +
    "\042\022\045\023\041\024\025\025\043\032\031\001\001" +
    "\000\012\023\063\030\356\031\055\034\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\366\005\046\006\037\007\017\010\021\011\020\016\034" +
    "\021\042\022\045\023\041\024\025\025\043\032\031\001" +
    "\001\000\012\023\063\030\373\031\055\034\061\001\001" +
    "\000\032\005\133\006\037\007\017\010\021\011\020\016" +
    "\034\021\042\022\045\023\041\024\025\025\043\032\031" +
    "\001\001\000\012\023\063\030\370\031\055\034\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private boolean errores=false;

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/

esta version si sirveeeeeeeeeeeeeeeeeeee joel actual
***********/
	public static void main(String args[]) throws Exception {
				DefaultSymbolFactory sf = new DefaultSymbolFactory();
		
		parser parser_obj=null; 
		Scanner lexico; 
	 
	   
		
		  lexico = new Scanner(new java.io.FileInputStream("ejemplo_fuente/ejemplo_enunciado.c"),sf);
		  parser_obj=new parser(lexico,sf);
		  parser_obj.parse();
          if(!lexico.error())
          {
  			System.out.println("Analisis Lexico sin errores.");

      	     
      		if(!parser_obj.gethayerrores()){	
      		System.out.println("Analisis Sintactico sin errores.");
	        NodoBase root=parser_obj.action_obj.getASTroot();
			System.out.println();
			System.out.println("---------------------- Impresion de AST ----------------------");
			System.out.println();
			ast.Util.imprimirAST(root);
			TablaSimbolos ts = new TablaSimbolos();
			ts.cargarTabla(root);
			ts.ImprimirClaves();
			
				if(!ts.geterror()){	
					
						sql.Generador.setTablaSimbolos(ts);
						sql.Generador.generarCodigoObjeto(root);
					}   
				else
				{	System.err.println("\n\nErrores encontrados en analisis semantico.\n");
					
					for(int i=0;i<ts.errores.size();i++)
						System.err.println(ts.errores.get(i));
					System.err.println("\nNo se puede continuar con la generacion de codigo.");
      		        
      		      }  	
      		    }
    		else
    		{	System.err.println("Errores encontrados en analisis sintactico.");
      		    System.err.println("No se puede continuar con la generacion de codigo.");
    		}
          }
          else
          {  System.err.println("\n\nErrores encontrados en analisis lexico/sintactico/semantico.");
          System.err.println("No se puede continuar con la generacion de codigo.");
	    	
          }
		
		
		
		
	
	
	} 


	public boolean gethayerrores(){
		return errores;
	}
	
   
	public void syntax_error(Symbol s){
		System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );
		errores=true;
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );
		errores=true; 
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= error 
            {
              NodoBase RESULT =null;
		 
				if(debug) 
					System.out.println("\t regla 12d"); 
				
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		 
				if(debug) 
					System.out.println("\t regla factor FALSE"); 
				
				System.out.println("Regla false");					
				RESULT= new NodoValor(false);										
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		 
				if(debug) 
					System.out.println("\t regla factor TRUE"); 
				
				System.out.println("Regla true");					
				RESULT= new NodoValor(true);										
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= ID DECREMENT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if(debug) System.out.println("\t regla decremental"); 
				
				if(variable != null){
				RESULT = new NodoAsignacion((new NodoIdentificador(variable.toString())).getNombre(), new NodoOperacion(new NodoIdentificador(variable.toString()),tipoOp.menos,new NodoValor(1)));
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= ID INCREMENT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if(debug) System.out.println("\t regla incremental"); 
				
				if(variable != null){

						RESULT = new NodoAsignacion((new NodoIdentificador(variable.toString())).getNombre(), new NodoOperacion(new NodoIdentificador(variable.toString()),tipoOp.mas,new NodoValor(1)));

							
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla es un ID"); 
				
				if(variable != null){
						RESULT= new NodoIdentificador(variable.toString());		
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) 
					System.out.println("\t regla es un numero"); 
					
				if(valor!=null){
					RESULT= new NodoValor(Integer.parseInt(valor));					
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // factor ::= llamada_stmt 
            {
              NodoBase RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase va = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) 
					System.out.println("\t regla factor llamda a funcion holaaaaaaaa"); 
					
				if(va != null){
					RESULT = va;					
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // factor ::= LPAREN exp_seq RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			 	if(debug) 
			 		System.out.println("\t regla factor con parentesis"); 
				
				RESULT = ex;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla factor"); 
					
					RESULT = exD;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla division"); 
					
					RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla multiplicacion"); 
					
					RESULT = new NodoOperacion(exI,tipoOp.por,exD);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
			 			if(debug) 
			 				System.out.println("\t regla expresion"); 

						RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) 
							System.out.println("\t regla resta"); 
						
						RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) 
							System.out.println("\t regla suma"); 
						
						RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla diferente"); 
                        
                        RESULT = exI;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // exp ::= exp DIFF simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla diferente"); 
                        
                        RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // exp ::= exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla igual"); 
                        
                        RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // exp ::= exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla mayor o igual"); 
                    	
                    	RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // exp ::= exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla menor o igual"); 
                     	
                     	RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // exp ::= exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla menor que"); 
                     	
                     	RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                			System.out.println("\t regla mayor que"); 
                     	RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp_seq ::= exp 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				    RESULT=sd;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp_seq ::= exp_seq AND exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) 
						System.out.println("\t regla and");
						
					RESULT = new NodoOperacion(exI,tipoOp.and,exD);					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp_seq ::= exp_seq OR exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) 
						System.out.println("\t regla or");
				 	
				 	RESULT = new NodoOperacion(exI,tipoOp.or,exD);				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // incre ::= ID DECREMENT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) System.out.println("\t regla decremental"); 
					
					if(variable != null){
						RESULT = new NodoAsignacion((new NodoIdentificador(variable.toString())).getNombre(), new NodoOperacion(new NodoIdentificador(variable.toString()),tipoOp.menos,new NodoValor(1)));
					}
					else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incre",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // incre ::= ID INCREMENT 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) System.out.println("\t regla incremental"); 
					
					if(variable != null){


		RESULT = new NodoAsignacion((new NodoIdentificador(variable.toString())).getNombre(), new NodoOperacion(new NodoIdentificador(variable.toString()),tipoOp.mas,new NodoValor(1)));

		
					}
					else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("incre",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // param_list ::= exp_seq 
            {
              NodoBase RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						    RESULT=exp;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // param_list ::= param_list COLOM exp_seq 
            {
              NodoBase RESULT =null;
		int paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase paramlist = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
								    
							NodoBase hijoActual = paramlist;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								
								hijoActual.setHermanoDerecha(exp);
								RESULT=paramlist;

							}
							else{
								RESULT=exp;
							}

						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // write_stmt ::= PUTS LPAREN simple_exp RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
				if(debug) 
					System.out.println("\t regla write con"); 
				
				RESULT= new NodoEscribir(ex);
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // read_stmt ::= GETS LPAREN ID RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
					if(debug) 
						System.out.println("\t regla read"); 
					
					if(variable!=null)
						RESULT = new NodoLeer((new NodoIdentificador(variable.toString())).getNombre());
					else{
						
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0002");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamada_stmt ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
						if(debug) 
							System.out.println("\t regla llamada"); 
								
						 RESULT= new NodoLlamadaFuncion((new NodoIdentificador(variable.toString())), null);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // llamada_stmt ::= ID LPAREN param_list RPAREN 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase exs = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) 
							System.out.println("\t regla llamada"); 
								
						 RESULT= new NodoLlamadaFuncion((new NodoIdentificador(variable.toString())),exs);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("llamada_stmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assign_stmt ::= ID ASSIGN exp_seq SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
						if(debug) System.out.println("\t regla asignacion a un id");

						if(variable!=null)
							RESULT = new NodoAsignacion((new NodoIdentificador(variable.toString())).getNombre(), ex);

						else{
							RESULT = null;
							System.out.println("Ocurrio error en cup # 0001");
						}
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // for_stmt ::= FOR LPAREN ID ASSIGN simple_exp SEMI exp SEMI simple_exp RPAREN LBRACKET RBRACKET 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase inicio = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int proporcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int proporcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase proporcion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
								if(debug) 
									System.out.println("\t regla for con asignacion sin cuerpo"); 


								NodoIdentificador n = new NodoIdentificador(var.toString());
                        		RESULT = new NodoFor(new NodoAsignacion(var.toString(), inicio),condicion,proporcion,null);							
                        	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // for_stmt ::= FOR LPAREN INT ID ASSIGN simple_exp SEMI exp SEMI simple_exp RPAREN LBRACKET RBRACKET 
            {
              NodoBase RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase inicio = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int proporcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int proporcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase proporcion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 
								if(debug) 
									System.out.println("\t regla for sin cuerpo"); 

								NodoIdentificador n = new NodoIdentificador(identificador.toString());
                        		NodoDeclaracion aux = new NodoDeclaracion("INT",n, new NodoAsignacion(identificador.toString(), inicio));
           		
								RESULT = new NodoFor(aux,condicion,proporcion,null);							
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // for_stmt ::= FOR LPAREN ID ASSIGN simple_exp SEMI exp SEMI simple_exp RPAREN LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase inicio = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int proporcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int proporcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase proporcion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
								if(debug) 
									System.out.println("\t regla for con asignacion"); 

								NodoIdentificador n = new NodoIdentificador(var.toString());
                        		RESULT = new NodoFor(new NodoAsignacion(var.toString(), inicio),condicion,proporcion,cuerpo);							
                        	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // for_stmt ::= FOR LPAREN INT ID ASSIGN simple_exp SEMI exp SEMI simple_exp RPAREN LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int inicioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int inicioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase inicio = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int proporcionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int proporcionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase proporcion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
								if(debug) 
									System.out.println("\t regla for con declaracion y asignacion"); 

								NodoIdentificador n = new NodoIdentificador(identificador.toString());
                        		NodoDeclaracion aux = new NodoDeclaracion("INT",n, new NodoAsignacion(identificador.toString(), inicio));
           		
								RESULT = new NodoFor(aux,condicion,proporcion,cuerpo);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // dowhile_stmt ::= DO LBRACKET stmt_seq RBRACKET WHILE LPAREN exp_seq RPAREN SEMI 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase seq = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
					if(debug) 
						System.out.println("\t regla do while"); 
					
					RESULT = new NodoWhile(seq,cuerpo);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("dowhile_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // while_stmt ::= WHILE LPAREN exp_seq RPAREN LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) 
						System.out.println("\t regla while"); 
					
					RESULT = new NodoWhile(prueba,cuerpo);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // if_stmt ::= IF LPAREN exp_seq RPAREN stmt 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase st = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla sentencia if"); 					
				
					RESULT = new NodoIf(ex,st);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // if_stmt ::= IF LPAREN exp_seq RPAREN LBRACKET stmt_seq RBRACKET ELSE LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) 
						System.out.println("\t sentencia if con else"); 
		
					RESULT = new NodoIf(ex,pthen,pelse);		
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // if_stmt ::= IF LPAREN exp_seq RPAREN LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) 
						System.out.println("\t regla sentencia if"); 					
				
					RESULT = new NodoIf(ex,pthen);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // stmt ::= error 
            {
              NodoBase RESULT =null;
		 
            		if(debug) 
            			System.out.println("\t Error en statement"); 
										
					RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // stmt ::= ID SEMI 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
					if(debug) System.out.println("\t regla incremental"); 
					
					if(variable != null){
							RESULT= new NodoIdentificador(variable.toString());		
					}
					else{
						RESULT = null;
						System.out.println("Ocurrio error en cup # 0005");
					}
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // stmt ::= incre SEMI 
            {
              NodoBase RESULT =null;
		int incleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int incright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase inc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		             			
        			if(debug) 
        				System.out.println("\t regla incre"); 

					RESULT=inc;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmt ::= declaracion 
            {
              NodoBase RESULT =null;
		int lista_declaracionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lista_declaracionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase lista_declaracion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		             			
        			if(debug) 
        				System.out.println("\t declaracion"); 

					RESULT=lista_declaracion;				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmt ::= llamada_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            		if(debug) 
            			System.out.println("\t regla llamada"); 
					
					RESULT=sesc;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            		if(debug) 
            			System.out.println("\t regla write"); 
					
					RESULT=sesc;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            		if(debug) 
            			System.out.println("\t regla read"); 
					
					RESULT=slec;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            		if(debug) 
            			System.out.println("\t regla assign"); 
					
					RESULT=sasi;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int forsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fors = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            		if(debug) 
            			System.out.println("\t regla for"); 
					
					RESULT=fors;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= dowhile_stmt 
            {
              NodoBase RESULT =null;
		int wrepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wrepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase wrep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla do while"); 
					
					RESULT=wrep;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= while_stmt 
            {
              NodoBase RESULT =null;
		int wrepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wrepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase wrep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
    				if(debug) 
    					System.out.println("\t regla while"); 
				
					RESULT=wrep;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            		if(debug) 
            			System.out.println("\t regla repeat"); 
						
					RESULT=srep;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla if"); 
					
					RESULT = sif;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declarar ::= BOOLEAN ID 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

					   		RESULT=  new NodoDeclaracion("BOOLEAN",new NodoIdentificador(var.toString()));
					   	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declarar ::= INT ID 
            {
              NodoBase RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   
   								if(var.toString()=="w")
   									System.out.println("\t asdasdhusbhaasidhasdjbnasudbasdnbasubd");

					   		RESULT=  new NodoDeclaracion("INT"     ,new NodoIdentificador(var.toString()));	
					   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declarar",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declara_param ::= declarar 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    if(dec!=null)
                        RESULT= dec;		
                        
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_param",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declara_param ::= declara_param COLOM declarar 
            {
              NodoBase RESULT =null;
		int declarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase declar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase dec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

						if(debug) System.out.println("\t regla de declaracion de parametros");
	
               			NodoBase hijoSeq = declar;
               			if(hijoSeq !=null){
                              
                               while(hijoSeq.TieneHermano()){
                                       hijoSeq = hijoSeq.getHermanoDerecha();
                               }
                               
                               hijoSeq.setHermanoDerecha(dec);
                               RESULT=declar;

               			}
               			else{
                               if(dec!=null)
                               	RESULT= dec;		
                       } 
                
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_param",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declara_list_boolean ::= ID 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(dec!=null){
							RESULT=  new NodoDeclaracion("BOOLEAN",new NodoIdentificador(dec.toString()));	
                   			
    
                    	}    		
                        
               		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list_boolean",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declara_list_boolean ::= ID ASSIGN exp_seq 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) 
							System.out.println("\t regla declaracion con asignacion boolean");

						if(dec!=null){
                               	NodoIdentificador aux = new NodoIdentificador(dec.toString());
                               RESULT=  new NodoDeclaracion("BOOLEAN",aux, new NodoAsignacion(dec.toString(), ex));	
                   			
                    	}

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list_boolean",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declara_list_boolean ::= declara_list_boolean COLOM ID ASSIGN exp_seq 
            {
              NodoBase RESULT =null;
		int declarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase declar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) 
						System.out.println("\t regla lista variables declaracion.");

           			NodoBase hijoSeq = declar;

									NodoIdentificador n = new NodoIdentificador(dec.toString());
                               		NodoDeclaracion aux =  new NodoDeclaracion("BOOLEAN",n, new NodoAsignacion(dec.toString(), ex));	
                   			
           			if(hijoSeq !=null){
                          
                           while(hijoSeq.TieneHermano()){
                                   hijoSeq = hijoSeq.getHermanoDerecha();
                           }
                           
                           hijoSeq.setHermanoDerecha(aux);
                           RESULT=declar;

           			}
           			else{
                           if(dec!=null)
                           	RESULT= aux;		
                   	}  
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list_boolean",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declara_list_boolean ::= declara_list_boolean COLOM ID 
            {
              NodoBase RESULT =null;
		int declarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase declar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) 
						System.out.println("\t regla lista variables declaracion.");

           			NodoBase hijoSeq = declar;
					NodoDeclaracion aux = new NodoDeclaracion("BOOLEAN",new NodoIdentificador(dec.toString()));

           			if(hijoSeq !=null){
                          
                           while(hijoSeq.TieneHermano()){
                                   hijoSeq = hijoSeq.getHermanoDerecha();
                           }
                           
                           hijoSeq.setHermanoDerecha(aux);
                           RESULT=declar;

           			}
           			else{
                           if(dec!=null)
                           	RESULT= aux;		
                   	}                 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list_boolean",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declara_list ::= ID 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(dec!=null){
							RESULT=  new NodoDeclaracion("INT",new NodoIdentificador(dec.toString()));	
                   			
    
                    	}    		
                        
               		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // declara_list ::= ID ASSIGN simple_exp 
            {
              NodoBase RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						if(debug) 
							System.out.println("\t regla declaracion con asignacion entero");

						if(dec!=null){

										NodoIdentificador aux = new NodoIdentificador(dec.toString());
                               		   	RESULT=  new NodoDeclaracion("INT",aux, new NodoAsignacion(dec.toString(), ex));	
                   			
                    	}

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declara_list ::= declara_list COLOM ID ASSIGN simple_exp 
            {
              NodoBase RESULT =null;
		int declarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase declar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
						if(debug) 
						System.out.println("\t regla lista variables declaracion.");

           			NodoBase hijoSeq = declar;

						NodoIdentificador n = new NodoIdentificador(dec.toString());
                        NodoDeclaracion aux = new NodoDeclaracion("INT",n, new NodoAsignacion(dec.toString(), ex));
           			if(hijoSeq !=null){
                          
                           while(hijoSeq.TieneHermano()){
                                   hijoSeq = hijoSeq.getHermanoDerecha();
                           }
                           
                           hijoSeq.setHermanoDerecha(aux);
                           RESULT=declar;

           			}
           			else{
                           if(dec!=null)
                           	RESULT= aux;		
                   	}  
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declara_list ::= declara_list COLOM ID 
            {
              NodoBase RESULT =null;
		int declarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase declar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) 
						System.out.println("\t regla lista variables declaracion.");

           			NodoBase hijoSeq = declar;
           			NodoDeclaracion aux = new NodoDeclaracion("INT",new NodoIdentificador(dec.toString()));

           			if(hijoSeq !=null){
                          
                           while(hijoSeq.TieneHermano()){
                                   hijoSeq = hijoSeq.getHermanoDerecha();
                           }
                           
                           hijoSeq.setHermanoDerecha(aux);
                           RESULT=declar;

           			}
           			else{
                           if(dec!=null)
                           	RESULT= aux;		
                   	}                 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declara_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracion ::= BOOLEAN declara_list_boolean SEMI 
            {
              NodoBase RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase nodo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
							 
		               			if(nodo != null){		                              
	                               	
                               		   	RESULT=  nodo;

                               		   	
		               			}
					   		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracion ::= INT declara_list SEMI 
            {
              NodoBase RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase nodo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		   					
		               			if(nodo !=null){		                              
                              		
                               		   	RESULT=  nodo;
                                        
		               			}
					   		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaracion",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            			
            			if(debug) System.out.println("\t regla secuencia de sentencias"); 
						RESULT=sent;				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt_seq ::= stmt_seq stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla secuencia de sentencias"); 
						
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}
						else{
							
							RESULT=sent;
						}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // function_stmt ::= VOID ID LPAREN RPAREN LBRACKET RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("VOID",new NodoIdentificador(func_nombre.toString(),true),null,null,null);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // function_stmt ::= VOID ID LPAREN declara_param RPAREN LBRACKET RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("VOID",new NodoIdentificador(func_nombre.toString(),true),parametros,null,null);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // function_stmt ::= BOOLEAN ID LPAREN RPAREN LBRACKET RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("BOOLEAN",new NodoIdentificador(func_nombre.toString(),true),null,null,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // function_stmt ::= INT ID LPAREN RPAREN LBRACKET RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion hola");
								RESULT=new NodoFuncion("INT",new NodoIdentificador(func_nombre.toString(),true),null,null,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // function_stmt ::= BOOLEAN ID LPAREN declara_param RPAREN LBRACKET RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("BOOLEAN",new NodoIdentificador(func_nombre.toString(),true),parametros,null,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // function_stmt ::= INT ID LPAREN declara_param RPAREN LBRACKET RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("INT",new NodoIdentificador(func_nombre.toString(),true), parametros,null,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // function_stmt ::= VOID ID LPAREN RPAREN LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("VOID",new NodoIdentificador(func_nombre.toString(),true),null,cuerpo,null);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // function_stmt ::= VOID ID LPAREN declara_param RPAREN LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("VOID",new NodoIdentificador(func_nombre.toString(),true),parametros,cuerpo,null);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // function_stmt ::= BOOLEAN ID LPAREN RPAREN LBRACKET stmt_seq RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("BOOLEAN",new NodoIdentificador(func_nombre.toString(),true),null,cuerpo,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // function_stmt ::= INT ID LPAREN RPAREN LBRACKET stmt_seq RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion hola");
								RESULT=new NodoFuncion("INT",new NodoIdentificador(func_nombre.toString(),true),null,cuerpo,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // function_stmt ::= BOOLEAN ID LPAREN declara_param RPAREN LBRACKET stmt_seq RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("BOOLEAN",new NodoIdentificador(func_nombre.toString(),true),parametros,cuerpo,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_stmt ::= INT ID LPAREN declara_param RPAREN LBRACKET stmt_seq RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(debug) System.out.println("\t regla funcion");
								RESULT=new NodoFuncion("INT",new NodoIdentificador(func_nombre.toString(),true), parametros,cuerpo,retorno);
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_list ::= function_stmt 
            {
              NodoBase RESULT =null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

                    	if(debug) System.out.println("\t regla funcion"); 
							RESULT=fun;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_list ::= function_list function_stmt 
            {
              NodoBase RESULT =null;
		int funlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase funl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fun = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

							NodoBase hijoSeq = funl;
							if(hijoSeq !=null){
									while(hijoSeq.TieneHermano()){
										hijoSeq = hijoSeq.getHermanoDerecha();
									}
									hijoSeq.setHermanoDerecha(fun);
									RESULT=funl;
							}
							else{
									if(fun!=null)
										RESULT= fun;		
								 
							} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_stmt ::= INT MAIN LPAREN RPAREN LBRACKET RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int main_funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int main_funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object main_func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla funcion");
						
						RESULT = new NodoFuncion("INT",new NodoIdentificador("main",true),null,null,retorno);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // main_stmt ::= VOID MAIN LPAREN RPAREN LBRACKET RBRACKET 
            {
              NodoBase RESULT =null;
		int main_funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int main_funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object main_func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla funcion");
						
						RESULT = new NodoFuncion("VOID",new NodoIdentificador("main",true),null,null,null);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_stmt ::= INT MAIN LPAREN RPAREN LBRACKET stmt_seq RETURN simple_exp SEMI RBRACKET 
            {
              NodoBase RESULT =null;
		int main_funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int main_funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object main_func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int retornoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int retornoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase retorno = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla funcion");
						
						RESULT = new NodoFuncion("INT",new NodoIdentificador("main",true),null,cuerpo,retorno);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_stmt ::= VOID MAIN LPAREN RPAREN LBRACKET stmt_seq RBRACKET 
            {
              NodoBase RESULT =null;
		int main_funcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int main_funcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object main_func = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla funcion");
						
						RESULT = new NodoFuncion("VOID",new NodoIdentificador("main",true),null,cuerpo,null);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_stmt",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= main_stmt 
            {
              Object RESULT =null;
		int metodo_mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metodo_mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase metodo_main = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                	
                	if(debug) System.out.println("\t regla INICIAR PROGRAMA"); 												                           
						ast = metodo_main;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= function_list main_stmt 
            {
              Object RESULT =null;
		int funlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase funl = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int metodo_mainleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int metodo_mainright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase metodo_main = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                        
                        if(debug) System.out.println("\t regla INICIAR PROGRAMA"); 		                           
							ast = funl;
                        
                        if(funl !=null){
                                
                                while(funl.TieneHermano()){
                                	funl = funl.getHermanoDerecha();
                                }
                                
                                funl.setHermanoDerecha(metodo_main);
                                RESULT= funl;
                        }

						funl.setHermanoDerecha(metodo_main);
                                                                             
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

