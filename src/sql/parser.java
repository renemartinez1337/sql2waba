
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Mar 04 11:51:08 BOT 2017
//----------------------------------------------------

package sql;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Mar 04 11:51:08 BOT 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\030\000\002\002\003\000\002\002\004\000\002\004" +
    "\004\000\002\004\004\000\002\003\007\000\002\003\021" +
    "\000\002\003\033\000\002\005\002\000\002\005\004\000" +
    "\002\006\005\000\002\006\003\000\002\006\003\000\002" +
    "\007\005\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\005\000\002\011\003\000" +
    "\002\011\003\000\002\011\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\004\004\007\001\002\000\004\002\074\001" +
    "\002\000\006\002\001\004\007\001\002\000\004\016\072" +
    "\001\002\000\006\020\012\023\010\001\002\000\006\005" +
    "\ufff7\013\ufff7\001\002\000\006\005\013\013\014\001\002" +
    "\000\006\005\ufff6\013\ufff6\001\002\000\004\023\016\001" +
    "\002\000\004\023\015\001\002\000\006\005\ufff8\013\ufff8" +
    "\001\002\000\014\002\ufffa\004\ufffa\006\021\007\017\016" +
    "\ufffa\001\002\000\004\023\045\001\002\000\010\002\ufffd" +
    "\004\ufffd\016\ufffd\001\002\000\016\003\031\021\026\022" +
    "\022\023\030\024\025\025\027\001\002\000\020\002\uffef" +
    "\004\uffef\011\uffef\012\uffef\014\uffef\015\uffef\016\uffef\001" +
    "\002\000\014\002\ufff9\004\ufff9\011\041\012\042\016\ufff9" +
    "\001\002\000\020\002\ufff3\004\ufff3\011\ufff3\012\ufff3\014" +
    "\036\015\035\016\ufff3\001\002\000\020\002\uffec\004\uffec" +
    "\011\uffec\012\uffec\014\uffec\015\uffec\016\uffec\001\002\000" +
    "\004\023\033\001\002\000\020\002\uffeb\004\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\015\uffeb\016\uffeb\001\002\000\020\002" +
    "\uffee\004\uffee\011\uffee\012\uffee\014\uffee\015\uffee\016\uffee" +
    "\001\002\000\020\002\uffea\004\uffea\011\uffea\012\uffea\014" +
    "\uffea\015\uffea\016\uffea\001\002\000\020\002\ufff0\004\ufff0" +
    "\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\001\002\000" +
    "\004\021\034\001\002\000\020\002\uffed\004\uffed\011\uffed" +
    "\012\uffed\014\uffed\015\uffed\016\uffed\001\002\000\016\003" +
    "\031\021\026\022\022\023\030\024\025\025\027\001\002" +
    "\000\016\003\031\021\026\022\022\023\030\024\025\025" +
    "\027\001\002\000\020\002\ufff2\004\ufff2\011\ufff2\012\ufff2" +
    "\014\ufff2\015\ufff2\016\ufff2\001\002\000\020\002\ufff1\004" +
    "\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\001\002" +
    "\000\016\003\031\021\026\022\022\023\030\024\025\025" +
    "\027\001\002\000\016\003\031\021\026\022\022\023\030" +
    "\024\025\025\027\001\002\000\020\002\ufff5\004\ufff5\011" +
    "\ufff5\012\ufff5\014\036\015\035\016\ufff5\001\002\000\020" +
    "\002\ufff4\004\ufff4\011\ufff4\012\ufff4\014\036\015\035\016" +
    "\ufff4\001\002\000\004\010\046\001\002\000\004\023\047" +
    "\001\002\000\004\017\050\001\002\000\004\023\051\001" +
    "\002\000\004\014\052\001\002\000\004\023\053\001\002" +
    "\000\004\017\054\001\002\000\004\023\055\001\002\000" +
    "\014\002\ufffa\004\ufffa\006\021\007\056\016\ufffa\001\002" +
    "\000\004\023\060\001\002\000\010\002\ufffc\004\ufffc\016" +
    "\ufffc\001\002\000\004\010\061\001\002\000\004\023\062" +
    "\001\002\000\004\017\063\001\002\000\004\023\064\001" +
    "\002\000\004\014\065\001\002\000\004\023\066\001\002" +
    "\000\004\017\067\001\002\000\004\023\070\001\002\000" +
    "\012\002\ufffa\004\ufffa\006\021\016\ufffa\001\002\000\010" +
    "\002\ufffb\004\ufffb\016\ufffb\001\002\000\006\002\ufffe\004" +
    "\ufffe\001\002\000\006\002\uffff\004\uffff\001\002\000\004" +
    "\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\072\000\010\002\003\003\005\004\004\001\001\000" +
    "\002\001\001\000\004\003\072\001\001\000\002\001\001" +
    "\000\004\006\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\007\022\010\023\011\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\037\001\001" +
    "\000\004\011\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\043\011\031\001\001\000\006\010\042" +
    "\011\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\056\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




private boolean errores=true;

/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/

esta version si sirveeeeeeeeeeeeeeeeeeee joel actual
***********/
	public static void main(String args[]) throws Exception {
				DefaultSymbolFactory sf = new DefaultSymbolFactory();
		
		parser parser_obj=null; 
		Scanner lexico; 
	 
	   
		
		  lexico = new Scanner(new java.io.FileInputStream("ejemplo_fuente/ejemplo_enunciado.c"),sf);
		  parser_obj=new parser(lexico,sf);
		  parser_obj.parse();
          if(!lexico.error())
          {
  			System.out.println("Analisis Lexico sin errores.");

      	     
      		if(!parser_obj.gethayerrores()){	
      		System.out.println("Analisis Sintactico sin errores.");
	        NodoBase root=parser_obj.action_obj.getASTroot();
			System.out.println();
			System.out.println("---------------------- Impresion de AST ----------------------");
			System.out.println();
			ast.Util.imprimirAST(root);
			TablaSimbolos ts = new TablaSimbolos();
			ts.cargarTabla(root);
			ts.ImprimirClaves();
			
				if(!ts.geterror()){	
					
						sql.Generador.setTablaSimbolos(ts);
						sql.Generador.generarCodigoObjeto(root);
					}   
				else
				{	System.err.println("\n\nErrores encontrados en analisis semantico.\n");
					
					for(int i=0;i<ts.errores.size();i++)
						System.err.println(ts.errores.get(i));
					System.err.println("\nNo se puede continuar con la generacion de codigo.");
      		        
      		      }  	
      		    }
    		else
    		{	System.err.println("Errores encontrados en analisis sintactico.");
      		    System.err.println("No se puede continuar con la generacion de codigo.");
    		}
          }
          else
          {  System.err.println("\n\nErrores encontrados en analisis lexico/sintactico/semantico.");
          System.err.println("No se puede continuar con la generacion de codigo.");
	    	
          }
		
		
		
		
	
	
	} 


	public boolean gethayerrores(){
		return errores;
	}
	
   
	public void syntax_error(Symbol s){
		System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );
		errores=true;
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );
		errores=true; 
	}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {



	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // factor ::= error 
            {
              NodoBase RESULT =null;
		 
				if(debug) 
					System.out.println("\t regla 12d"); 
				
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		 
				if(debug) 
					System.out.println("\t regla factor FALSE"); 
				
				System.out.println("Regla false");					
				RESULT= new NodoValor(false);										
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		 
				if(debug) 
					System.out.println("\t regla factor TRUE"); 
				
				System.out.println("Regla true");					
				RESULT= new NodoValor(true);										
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // factor ::= QUOTES ID QUOTES 
            {
              NodoBase RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
				if(debug) System.out.println("\t regla es un ID entre QUOTES"); 
				
				if(variable != null){
						RESULT= new NodoIdentificador(nombre.toString());		
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) System.out.println("\t regla es un ID"); 
				
				if(variable != null){
						RESULT= new NodoIdentificador(variable.toString());		
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
				if(debug) 
					System.out.println("\t regla es un numero"); 
					
				if(valor!=null){
					RESULT= new NodoValor(Integer.parseInt(valor));					
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // exp ::= factor 
            {
              NodoBase RESULT =null;
		int facleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int facright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fac = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla diferente"); 
                        
                        //RESULT = exI;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // exp ::= exp NOT_EQUAL factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla diferente"); 
                        
                        //RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // exp ::= exp EQUAL factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                    	if(debug) 
                    		System.out.println("\t regla igual"); 
                        
                        //RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // exp_seq ::= exp 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				    //RESULT=sd;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // exp_seq ::= exp_seq AND exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) 
						System.out.println("\t regla and");
						
					//RESULT = new NodoOperacion(exI,tipoOp.and,exD);					
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // exp_seq ::= exp_seq OR exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(debug) 
						System.out.println("\t regla or");
				 	
				 	//RESULT = new NodoOperacion(exI,tipoOp.or,exD);				
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param_list ::= ALL 
            {
              NodoBase RESULT =null;
		int todoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int todoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object todo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						RESULT = todo;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // param_list ::= ID 
            {
              NodoBase RESULT =null;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
						    RESULT=col;
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // param_list ::= param_list COLOM ID 
            {
              NodoBase RESULT =null;
		int paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase paramlist = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int colright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String col = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
								    
							NodoBase hijoActual = paramlist;
							if(hijoActual !=null){
								while(hijoActual.TieneHermano()){
									hijoActual = hijoActual.getHermanoDerecha();
								}
								
								hijoActual.setHermanoDerecha(exp);
								RESULT=paramlist;

							}
							else{
								RESULT=col;
							}

						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // where ::= WHERE exp_seq 
            {
              NodoBase RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase b = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
            		if(debug) 
            			System.out.println("\t regla where"); 
										
					RESULT=null;
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("where",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // where ::= 
            {
              NodoBase RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("where",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select_stmt ::= SELECT param_list FROM ID JOIN ID ON ID DOT ID EQUAL ID DOT ID JOIN ID ON ID DOT ID EQUAL ID DOT ID where 
            {
              NodoBase RESULT =null;
		int columnasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).left;
		int columnasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-23)).right;
		NodoBase columnas = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-23)).value;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-21)).right;
		String tabla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-21)).value;
		int tabla2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).left;
		int tabla2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-19)).right;
		String tabla2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-19)).value;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-17)).right;
		String tabla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-17)).value;
		int columna1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int columna1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		String columna1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int tabla2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int tabla2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		String tabla2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int columna2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int columna2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String columna2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tabla3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tabla3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tabla3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tabla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int columna3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int columna3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String columna3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tabla3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tabla3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tabla3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int columna4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int columna4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String columna4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase w = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla select con join de 2 tablas"); 
					
					//RESULT = new Select();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-24)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // select_stmt ::= SELECT param_list FROM ID JOIN ID ON ID DOT ID EQUAL ID DOT ID where 
            {
              NodoBase RESULT =null;
		int columnasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).left;
		int columnasright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)).right;
		NodoBase columnas = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-13)).value;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tabla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int tabla2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tabla2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String tabla2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int tablaJoinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tablaJoinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String tablaJoin = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int columna1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int columna1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String columna1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tabla2Joinleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tabla2Joinright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String tabla2Join = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int columna2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int columna2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String columna2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase w = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla select con join de 1 tabla"); 
					
					//RESULT = new Select();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-14)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // select_stmt ::= SELECT param_list FROM ID where 
            {
              NodoBase RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase c = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tablaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tablaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String tabla = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase w = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					if(debug) 
						System.out.println("\t regla select"); 
					
					//RESULT = new Select(c, w);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_stmt",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // stmt_seq ::= select_stmt SEMI 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
            			
            			if(debug) System.out.println("\t regla sentencia de select"); 
						RESULT=sent;				
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt_seq ::= stmt_seq select_stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(debug) System.out.println("\t regla secuencia de sentencias"); 
						
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							
							hijoActual.setHermanoDerecha(sent);
							RESULT=ini;
						}
						else{
							
							RESULT=sent;
						}
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= stmt_seq 
            {
              Object RESULT =null;
		int scriptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int scriptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase script = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                                	
                	if(debug) System.out.println("\t regla INICIAR SQL"); 												                           
						ast = script;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

