package sql;

import java_cup.runtime.*;
import ast.*;
import java.util.ArrayList;

parser code {:

private boolean errores = false;


/***********
SymbolFactory es una nueva caracteristica que ha sido a�adida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas
, esto debido a que dicha clase no provee mucha informaci�n de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST
Mas informacion en: http//4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/

esta version si sirveeeeeeeeeeeeeeeeeeee joel actual
***********/
	public static void main(String args[]) throws Exception {
				DefaultSymbolFactory sf = new DefaultSymbolFactory();
				
		parser parser_obj=null; 
		Scanner lexico; 
	 	

	   
		
		  lexico = new Scanner(new java.io.FileInputStream("ejemplo_fuente/ejemplo_enunciado.c"),sf);
		  parser_obj=new parser(lexico,sf);
		  parser_obj.parse();
          if(!lexico.error())
          {
  			System.out.println("Analisis Lexico sin errores.");

      	     
      		if(!parser_obj.gethayerrores()){	
		  		System.out.println("Analisis Sintactico sin errores.");
		        NodoBase root=parser_obj.action_obj.getASTroot();
				System.out.println();
				System.out.println("---------------------- Impresion de AST ----------------------");
				System.out.println();
				ast.Util.imprimirAST(root, parser_obj.action_obj.getLista());			
				System.out.println("\n---------------------- Impresion de AST ----------------------");
      		}
    		else{	
    			System.err.println("Errores encontrados en analisis sintactico.");
      		    System.err.println("No se puede continuar con la generacion de codigo.");
    		}
          }
          else
          {  System.err.println("\n\nErrores encontrados en analisis lexico/sintactico/semantico.");
          System.err.println("No se puede continuar con la generacion de codigo.");
	    	
          }				
	} 


	public boolean gethayerrores(){
		return errores;
	}
	
   
	public void syntax_error(Symbol s){
		System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );
		errores=true;
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );
		errores=true; 
	}

:}

action code {:

	private boolean debug=true;
	private NodoBase ast=null;
	private int lineanum=0;
	public ArrayList<NodoIdentificador> siguientes = new ArrayList<NodoIdentificador>();
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}	

	public ArrayList<NodoIdentificador> getLista(){
		return siguientes;
	}
:}

/* Simbolos Terminales */
terminal SELECT;
terminal FROM;
terminal WHERE; 
terminal JOIN;
terminal ON;
terminal AND;
terminal OR;
terminal COLOM;
terminal EQUAL;
terminal NOT_EQUAL;
terminal SEMI;
terminal DOT;
terminal ALL;
terminal QUOTES;
terminal String NUM;
terminal String ID;
terminal TRUE;
terminal FALSE;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase select_stmt;
non terminal NodoBase stmt_seq;
non terminal NodoBase where;
non terminal NodoBase param_list;
non terminal NodoBase exp_seq;
non terminal NodoBase exp;
non terminal NodoBase factor;



/* BLOQUE PRINCIPAL */

program     ::= stmt_seq:script 
					{: 
                                	
                	if(debug) System.out.println("\t regla INICIAR SQL"); 												                           
						ast = script;
					:}
;

stmt_seq    ::= stmt_seq:ini select_stmt:sent	{: if(debug) System.out.println("\t regla secuencia de sentencias"); 
						
						NodoBase hijoActual = ini;
						if(hijoActual !=null){
							
							while(hijoActual.TieneHermano()){
								hijoActual = hijoActual.getHermanoDerecha();
							}
							
							hijoActual.setHermanoDerecha(sent);
							RESULT = ini;
						}
						else{
							
							RESULT=sent;
						}
			:}

            | select_stmt:sent	SEMI {: 
            			
            			if(debug) System.out.println("\t regla sentencia de select"); 
						RESULT=sent;				
			:}

;

select_stmt        ::= SELECT param_list:c FROM ID:tabla where:w
				{: 
					if(debug) 
						System.out.println("\t regla select normal"); 
					
					RESULT = new NodoSelect(c, new NodoFrom(tabla.toString()), w);
				:}

			|

				SELECT param_list:columnas FROM ID:tabla JOIN ID:tabla2 ON ID:tablaJoin DOT ID:columna1 EQUAL ID:tabla2Join DOT ID:columna2 where:w
				{: 
					if(debug) 
						System.out.println("\t regla select con join de 1 tabla"); 
					
					NodoFrom desde = new NodoFrom(tabla.toString());

					NodoIdentificador aux = new NodoIdentificador(tablaJoin.toString(), columna1.toString());
					NodoIdentificador aux2 = new NodoIdentificador(tabla2Join.toString(), columna2.toString());					
					NodoJoin union = new NodoJoin(tabla2, new NodoCondicion(aux, tipoCond.equal, aux2));
					
					RESULT = new NodoSelect(columnas, desde, union, w);
				:}

			|

				SELECT param_list:columnas FROM ID:tabla JOIN ID:tabla2 ON ID:tablaJoin DOT ID:columna1 EQUAL ID:tabla2Join DOT ID:columna2 JOIN ID:tabla3 ON ID:tabla3Join DOT ID:columna3 EQUAL ID:tabla4Join DOT ID:columna4 where:w
				{: 
					if(debug) 
						System.out.println("\t regla select con join de 2 tablas"); 

					NodoFrom desde = new NodoFrom(tabla.toString());

					NodoIdentificador aux = new NodoIdentificador(tablaJoin.toString(), columna1.toString());
					NodoIdentificador aux2 = new NodoIdentificador(tabla2Join.toString(), columna2.toString());
					NodoJoin union = new NodoJoin(tabla2, new NodoCondicion(aux, tipoCond.equal, aux2));					

					NodoIdentificador aux3 = new NodoIdentificador(tabla3Join.toString(), columna3.toString());
					NodoIdentificador aux4 = new NodoIdentificador(tabla4Join.toString(), columna4.toString());
					NodoJoin union2 = new NodoJoin(tabla3, new NodoCondicion(aux3, tipoCond.equal, aux4));
					
					RESULT = new NodoSelect(columnas, desde, union, union2, w);										
				:}                       
;

where ::= WHERE exp_seq:b {: 
            		if(debug) 
            			System.out.println("\t regla where"); 
										
					RESULT = b;
				:}
     
      ;


param_list		::= param_list:paramlist COLOM ID:col
						{: 							
							NodoBase hijoSeq = paramlist;
		           			NodoIdentificador aux = new NodoIdentificador(col.toString());

		           			if(hijoSeq != null){
		                          
		                           while(hijoSeq.TieneHermano()){
		                           		hijoSeq = hijoSeq.getHermanoDerecha();
		                           }

		                           hijoSeq.setHermanoDerecha(aux);
		                           RESULT = paramlist;

		           			}
		           			else{
		                           if(col!=null)
		                           	RESULT= aux;		
		                   	}  

						:}
							
					| 

					ID:col
						{:
						    RESULT= new NodoIdentificador(col.toString());	
						:}
					|

					ALL:todo {:
						RESULT = new NodoIdentificador("ALL");
					:}
						
					
;


exp_seq		::= exp_seq:exI AND exp:exD	
				{:
					if(debug) 
						System.out.println("\t regla and");
				 	
				 	RESULT = new NodoCondicion(exI,tipoCond.and,exD);				
				:}

			| exp_seq:exI OR exp:exD 
				{:
					if(debug) 
						System.out.println("\t regla or");
						
					RESULT = new NodoCondicion(exI,tipoCond.or,exD);					
				:}

			| exp:sd 
				{:
				    RESULT=sd;
				:}
;

exp ::= 	 	exp:exI EQUAL factor:exD	
                    {: 
                    	if(debug) 
                    		System.out.println("\t regla igual"); 
                        
                        RESULT = new NodoCondicion(exI,tipoCond.equal,exD);
                    :}
                
                | exp:exI NOT_EQUAL factor:exD	
                    {: 
                    	if(debug) 
                    		System.out.println("\t regla diferente"); 
                        
                        RESULT = new NodoCondicion(exI,tipoCond.not_equal,exD);
                    :}

                | factor:fac 	
                    {: 
                    	if(debug) 
                    		System.out.println("\t regla factor"); 
                        
                        RESULT = fac;
                    :}
                                
;

factor  ::= NUM:valor	
			{: 
				if(debug) 
					System.out.println("\t regla es un numero"); 
					
				if(valor != null){
					RESULT = new NodoValor(Integer.parseInt(valor));					
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			:}

		| ID:variable	
			{: 
				if(debug) System.out.println("\t regla es un ID"); 
				
				if(variable != null){
						RESULT= new NodoIdentificador(variable.toString());		
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			:}
		| QUOTES ID:nombre QUOTES 
			{: 
				if(debug) System.out.println("\t regla es un ID entre QUOTES"); 
				
				if(nombre != null){
						RESULT= new NodoIdentificador(nombre.toString());		
				}
				else{
					RESULT = null;
					System.out.println("Ocurrio error en cup # 0005");
				}
			:}
		|
		TRUE	
			{: 
				if(debug) 
					System.out.println("\t regla factor TRUE"); 
				
				System.out.println("Regla true");					
				RESULT= new NodoValor(true);										
			:}
		
		| FALSE 
			{: 
				if(debug) 
					System.out.println("\t regla factor FALSE"); 
				
				System.out.println("Regla false");					
				RESULT= new NodoValor(false);										
			:}		
                
		| error	
			{: 
				if(debug) 
					System.out.println("\t regla 12d"); 
				
				System.out.println("Ocurrio error en cup # 0003");
				RESULT=null;
			:}             
;